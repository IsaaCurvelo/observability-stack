// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quotation_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExclusiveTitlesServiceClient is the client API for ExclusiveTitlesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExclusiveTitlesServiceClient interface {
	GetByVendorID(ctx context.Context, in *ExclusiveTitlesRequest, opts ...grpc.CallOption) (*ExclusiveTitlesResponse, error)
}

type exclusiveTitlesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExclusiveTitlesServiceClient(cc grpc.ClientConnInterface) ExclusiveTitlesServiceClient {
	return &exclusiveTitlesServiceClient{cc}
}

func (c *exclusiveTitlesServiceClient) GetByVendorID(ctx context.Context, in *ExclusiveTitlesRequest, opts ...grpc.CallOption) (*ExclusiveTitlesResponse, error) {
	out := new(ExclusiveTitlesResponse)
	err := c.cc.Invoke(ctx, "/pb.ExclusiveTitlesService/GetByVendorID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExclusiveTitlesServiceServer is the server API for ExclusiveTitlesService service.
// All implementations must embed UnimplementedExclusiveTitlesServiceServer
// for forward compatibility
type ExclusiveTitlesServiceServer interface {
	GetByVendorID(context.Context, *ExclusiveTitlesRequest) (*ExclusiveTitlesResponse, error)
	mustEmbedUnimplementedExclusiveTitlesServiceServer()
}

// UnimplementedExclusiveTitlesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExclusiveTitlesServiceServer struct {
}

func (UnimplementedExclusiveTitlesServiceServer) GetByVendorID(context.Context, *ExclusiveTitlesRequest) (*ExclusiveTitlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByVendorID not implemented")
}
func (UnimplementedExclusiveTitlesServiceServer) mustEmbedUnimplementedExclusiveTitlesServiceServer() {
}

// UnsafeExclusiveTitlesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExclusiveTitlesServiceServer will
// result in compilation errors.
type UnsafeExclusiveTitlesServiceServer interface {
	mustEmbedUnimplementedExclusiveTitlesServiceServer()
}

func RegisterExclusiveTitlesServiceServer(s grpc.ServiceRegistrar, srv ExclusiveTitlesServiceServer) {
	s.RegisterService(&ExclusiveTitlesService_ServiceDesc, srv)
}

func _ExclusiveTitlesService_GetByVendorID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExclusiveTitlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExclusiveTitlesServiceServer).GetByVendorID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExclusiveTitlesService/GetByVendorID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExclusiveTitlesServiceServer).GetByVendorID(ctx, req.(*ExclusiveTitlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExclusiveTitlesService_ServiceDesc is the grpc.ServiceDesc for ExclusiveTitlesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExclusiveTitlesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExclusiveTitlesService",
	HandlerType: (*ExclusiveTitlesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByVendorID",
			Handler:    _ExclusiveTitlesService_GetByVendorID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".protos/exclusive_titles.proto",
}
